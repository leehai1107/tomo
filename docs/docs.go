// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/internal/api/v1/chat/ws/{roomId}": {
            "get": {
                "description": "Establish a WebSocket connection for real-time chat",
                "tags": [
                    "chat"
                ],
                "summary": "WebSocket connection",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Room ID",
                        "name": "roomId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Switching Protocols to WebSocket"
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/apiwrapper.APIResponse"
                        }
                    }
                }
            }
        },
        "/internal/api/v1/user/login": {
            "post": {
                "description": "Authenticate a user and return a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response with token",
                        "schema": {
                            "$ref": "#/definitions/apiwrapper.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/apiwrapper.APIResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/apiwrapper.APIResponse"
                        }
                    }
                }
            }
        },
        "/internal/api/v1/user/register": {
            "post": {
                "description": "Register a new user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "Registration information",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.Register"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success response",
                        "schema": {
                            "$ref": "#/definitions/apiwrapper.APIResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/apiwrapper.APIResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/apiwrapper.APIResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apiwrapper.APIResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "$ref": "#/definitions/errors.ErrorType"
                },
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "integer"
                }
            }
        },
        "errors.ErrorType": {
            "type": "integer",
            "enum": [
                2,
                1,
                0,
                -1,
                -2,
                -3,
                -4,
                -5,
                -6,
                -7,
                -8,
                -9,
                -10,
                -11,
                -12,
                -13,
                -14,
                -15,
                -16,
                -17,
                -49
            ],
            "x-enum-varnames": [
                "Processing",
                "Success",
                "Unknown",
                "BadRequestErr",
                "NotFound",
                "AuthenticationFailed",
                "InternalServerError",
                "IllegalStateError",
                "SendMessageError",
                "CallInternalAPIError",
                "InvalidData",
                "SerializingError",
                "DeserializingError",
                "CastingError",
                "ParsingError",
                "ConflictError",
                "CallGRPCAPIError",
                "EncryptError",
                "DecryptError",
                "MethodError",
                "Fail"
            ]
        },
        "request.Login": {
            "description": "User login request",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User's password",
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "request.Register": {
            "description": "User registration request",
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "first_name": {
                    "description": "User's first name",
                    "type": "string",
                    "example": "John"
                },
                "last_name": {
                    "description": "User's last name",
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "description": "User's password",
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
